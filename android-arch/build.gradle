apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "kotlin-kapt"
apply plugin: "jacoco"

android {
    compileSdkVersion target_sdk_version
    buildToolsVersion build_tool_ver

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    testOptions.junitPlatform {
        filters {
            includeClassNamePatterns '.*Spek'
            engines.include 'spek'
        }

        jacocoOptions {
            html {
                enabled true
                destination project.file("${buildDir}/jacoco-report/result/")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

jacoco {
    reportsDir = file("$buildDir/jacoco-report/")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlin_croutine_ver"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_croutine_ver"
    //lifecycle
    compileOnly "android.arch.lifecycle:common:$arch_ver"
    compileOnly "android.arch.lifecycle:runtime:$arch_ver"
    testImplementation "android.arch.lifecycle:common:$arch_ver"
    testImplementation "android.arch.lifecycle:runtime:$arch_ver"
    kapt "android.arch.lifecycle:compiler:$arch_ver"
    //spek
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:$spek_ver"
    testImplementation "org.jetbrains.spek:spek-api:$spek_ver"
    //test
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

// junit report xml to html

configurations {
    junitXmlToHtml
}

dependencies {
    junitXmlToHtml 'org.apache.ant:ant-junit:1.10.3'
}

gradle.taskGraph.whenReady { taskGraph ->
    def junitPlatformTest = ":android-arch:test"
    println("whenReady $junitPlatformTest")
    if (!taskGraph.hasTask(junitPlatformTest)) return
    println("hasTask")
    taskGraph.allTasks.find { it.name == "test" }.doLast {
        def reportsDirPath = "$buildDir/test-reports"
        (new File(reportsDirPath)).mkdirs()

        ant.taskdef(name: 'junitReport',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitXmlToHtml.asPath)

        ["debug", "release"].forEach { dirName ->
            def xmlReportDir = "$buildDir/test-results/$dirName/junit-platform"
            ant.junitReport(todir: xmlReportDir, tofile: "aggregated-test-results.xml") {
                fileset(dir: xmlReportDir)
                def dir = new File("$reportsDirPath/$dirName/")
                dir.mkdirs()
                report(format: 'noframes', todir: dir)
            }
        }
    }
}